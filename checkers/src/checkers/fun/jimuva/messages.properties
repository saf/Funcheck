anonymous.assigns.this.to.array.field=Cannot assign a reference to this to the array field "%s" in an @Anonymous method.
anonymous.assigns.this.to.field=Cannot assign a reference to this to the field "%s" in an @Anonymous method.
anonymous.calls.non.anonymous=Cannot call non-@Anonymous method %s() inside the @Anonymous method %s().
anonymous.calls.non.anonymous.on.alias=Cannot call non-@Anonymous method %s() on possible alias of this inside the @Anonymous method %s().
anonymous.implicit=The @Anonymous annotation is implicit on %s() due to the class "%s" being an @ImmutableClass.
anonymous.returns.this=Cannot return a reference to this from an @Anonymous method.
argument.may.be.this=Cannot pass "%s" as a method argument inside an @Anonymous method.
assign.readonly.receiver.field=Cannot assign field "%s" in @ReadOnly method %s().
assign.immutable.field=Cannot assign field "%s" of the @Immutable object "%s".
assignment.to.field.of.immutable.array=Cannot assign to the field %s of an @Immutable array.
assignment.to.field.of.rep=Cannot assign to the field "%s" of the @Rep object "%s" here.
assignment.to.rep.array.of.immutable=Cannot assign to the field %s of a @Rep array of an immutable object.
assignment.to.rep.array.of.receiver=Cannot assign to a field of a @Rep array %s. The array is part of the inner state of 'this' and may not be modified here.
immutable.calls.nonreadonly=Cannot invoke the non-@Readonly method %s on the @Immutable object %s.
immutable.untrusted.constructor=Creating an @Immutable object using a non-@Anonymous constructor. The constructor may leak references to this and let other objects observe the object's state while it is not fully constructed.
mutable.reference.to.immutable.class=Cannot create a @Mutable reference to an object of a class marked with @ImmutableClass.
nonreadonly.call.on.rep=Cannot call non-@ReadOnly method %s() on @Rep object "%s".
public.rep.field=The @Rep field "%s" cannot be public.
readonly.implicit=The @ReadOnly annotation is implicit on %s() due to the enclosing class %s being an @ImmutableClass.
this.ref.alias="%s" may be an alias to this assigned here:
this.ref.nonanonymous.on.alias=A reference to this may be returned by the call to the non-@Anonymous method %s() of a possible alias "%s" of this, assigned here:
this.ref.nonanonymous.on.this=A reference to this may be returned by the call to the non-@Anonymous method %s().